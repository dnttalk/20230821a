#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('nodejs-03:server');
const http = require('http');
const os = require('os');
const { exec } = require('child_process');

const WINDOWS_PLATFORM = 'win32';
const MAC_PLATFORM = 'darwin';

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function openBrowser(url) {
    const osPlatform = os.platform();
    let command;

    if (osPlatform === WINDOWS_PLATFORM) {
        command = `start chrome --start-fullscreen ${url} --kiosk --incognito --disable-pinch --overscroll-history-navigation=0`;
    }

    console.log(`Executing command: ${command}`);
    exec(command);
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    debug('Listening on ' + bind);
    console.log(`Server running at http://localhost:${port}/`);
    openBrowser(`http://localhost:${port}`);
}